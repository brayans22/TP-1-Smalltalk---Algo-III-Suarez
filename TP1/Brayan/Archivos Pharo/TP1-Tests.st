TestCase subclass: #DescuentoNuloTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!DescuentoNuloTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 04:30'!test01SeAgregaUnaLlamadaNacionalEnHorarioHabilConDuracionDe29MinYsuDescuentoEsElEsperado	| llamada descuento precioEsperado |		"Arrange"	precioEsperado := 5.8.	llamada := RegistroLlamadaNacional conDuracion: 29 yConHorario: 15.	descuento := DescuentoNulo new.		"Act and Assert"	self assert: ( descuento calcularDescuentoFinal: 5.8  ) equals: precioEsperado.	! !!DescuentoNuloTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 05:22'!test02SeAgregaUnaLlamadaNacionalEnHorarioNoHabilConDuracionDe10MinYsuDescuentoEsElEsperado	| llamada descuento precioNoEsperado |		"Arrange"	precioNoEsperado := 1.	llamada := RegistroLlamadaNacional conDuracion: 10 yConHorario: 2.	descuento := DescuentoNulo new.		"Act and Assert"	self deny: ( ( descuento calcularDescuentoFinal: 1 ) - 0.1 ) equals: precioNoEsperado.	! !!DescuentoNuloTest methodsFor: 'tests' stamp: 'Brayan 4/25/2022 02:55'!test03SeLanzaUnaExcepcionCuandoSeCalculaElPrecioFinalDeUnaLlamadaNacionalConDescuentoNulo	| llamada descuento precioEsperado |		"Arrange"	precioEsperado := -1.	llamada := RegistroLlamadaNacional conDuracion: 29 yConHorario: 15.	descuento := DescuentoNulo new.		"Act and Assert"	self should: [ 		descuento calcularDescuentoFinal: precioEsperado.	] raise: CostoNegativoError.		! !!DescuentoNuloTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 04:47'!test05SeAgregaUnaLlamadaInterNacionalConDuracionDe29MinYsuDescuentoEsElEsperado	| registro precioEsperado descuento |		"arrange"	precioEsperado := (29 * 10).		registro := RegistroLlamadaInternacional conDuracion: 29 conHorario: 20 HaciaUnPais: 'Colombia' 	            yConTarifaInternacional: 10.		descuento := DescuentoNulo new.	"Act and Assert"	self assert: ( descuento calcularDescuentoFinal: 290 ) equals: precioEsperado.! !!DescuentoNuloTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 08:16'!test07SeAgreganDosLlamadasNacionalesYElPrecioFinalTieneElDescuentoDeAmbaLlamadas	| registro1 registro2 descuento precioTotalConDescuento |		"arrange"		registro1 := RegistroLlamadaNacional conDuracion: 29 yConHorario: 8.	registro2 := RegistroLlamadaNacional conDuracion: 25 yConHorario: 1.		descuento := DescuentoNulo new.	precioTotalConDescuento := descuento calcularDescuentoFinal: 5.8.	precioTotalConDescuento := precioTotalConDescuento + ( descuento calcularDescuentoFinal: 2.5 ).	"Act and Assert"	self assert: ( precioTotalConDescuento ) equals: ( registro1 costoLlamada + registro2 costoLlamada ).! !!DescuentoNuloTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 08:14'!test06SeAgregaUnaLlamadaInterNacionalYOtraNacionalYElPrecioFinalTieneElDescuentoDeAmbaLlamadas	| registro1 registro2 descuento precioTotalConDescuento |		"arrange"		registro1 := RegistroLlamadaInternacional conDuracion: 29 conHorario: 20 HaciaUnPais: 'Colombia' 	            yConTarifaInternacional: 10.		registro2 := RegistroLlamadaNacional conDuracion: 8 yConHorario: 15.		descuento := DescuentoNulo new.	precioTotalConDescuento := descuento calcularDescuentoFinal: 290.	precioTotalConDescuento := precioTotalConDescuento + ( descuento calcularDescuentoFinal: 1.6 ).	"Act and Assert"	self assert: ( precioTotalConDescuento ) equals: ( registro1 costoLlamada + registro2 costoLlamada ).! !!DescuentoNuloTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 04:44'!test04SeLanzaUnaExcepcionCuandoSeAgregaUnaLlamadaInternacionalConPrecioNegativoSinDescuento	| registro precio descuento |		"arrange"	precio := (-30 * 10).		registro := RegistroLlamadaInternacional conDuracion: 30 conHorario: 20 HaciaUnPais: 'Colombia' 	            yConTarifaInternacional: 10.		descuento := DescuentoNulo new.	"Act and Assert"	self should: [ 		descuento calcularDescuentoFinal: precio.	] raise: CostoNegativoError.! !TestCase subclass: #DescuentoPorDuracionTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!DescuentoPorDuracionTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 08:09'!test06SeAgreganDosLlamadasNacionalesYElPrecioFinalTieneElDescuentoDeAmbaLlamadas	| registro1 registro2 descuento precioTotalConDescuento |		"arrange"		registro1 := RegistroLlamadaNacional conDuracion: 30 yConHorario: 8.	registro2 := RegistroLlamadaNacional conDuracion: 36 yConHorario: 1.		descuento := DescuentoPorDuracion new.	precioTotalConDescuento := descuento calcularDescuentoFinal: 3.6.	precioTotalConDescuento := precioTotalConDescuento + ( descuento calcularDescuentoFinal: 6 ).	"Act and Assert"	self assert: ( precioTotalConDescuento ) equals: ( registro1 costoLlamada + registro2 costoLlamada ).! !!DescuentoPorDuracionTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 07:47'!test04SeAgregaUnaLlamadaInterNacionalConDuracionDe30MinYsuDescuentoEsElEsperado	| registro descuento |		"arrange"		registro := RegistroLlamadaInternacional conDuracion: 30 conHorario: 20 HaciaUnPais: 'Colombia' 	            yConTarifaInternacional: 10.		descuento := DescuentoPorDuracion new.	"Act and Assert"	self assert: ( descuento calcularDescuentoFinal: 300 ) equals: registro costoLlamada.! !!DescuentoPorDuracionTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 07:45'!test02SeAgregaUnaLlamadaNacionalEnHorarioNoHabilConDuracionDe40MinYsuDescuentoEsElEsperado	| llamada descuento |		"Arrange"	llamada := RegistroLlamadaNacional conDuracion: 40 yConHorario: 2.	descuento := DescuentoPorDuracion new.		"Act and Assert"	self deny: ( descuento calcularDescuentoFinal: 4  ) equals: llamada costoLlamada + 0.4.! !!DescuentoPorDuracionTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 08:05'!test05SeAgregaUnaLlamadaInterNacionalYOtraNacionalYElPrecioFinalTieneElDescuentoDeAmbaLlamadas	| registro1 registro2 descuento precioTotalConDescuento |		"arrange"		registro1 := RegistroLlamadaInternacional conDuracion: 30 conHorario: 20 HaciaUnPais: 'Colombia' 	            yConTarifaInternacional: 10.		registro2 := RegistroLlamadaNacional conDuracion: 30 yConHorario: 15.		descuento := DescuentoPorDuracion new.	precioTotalConDescuento := descuento calcularDescuentoFinal: 6.	precioTotalConDescuento := precioTotalConDescuento + ( descuento calcularDescuentoFinal: 300 ).	"Act and Assert"	self assert: ( precioTotalConDescuento ) equals: ( registro1 costoLlamada + registro2 costoLlamada ).! !!DescuentoPorDuracionTest methodsFor: 'tests' stamp: 'Brayan 4/25/2022 02:54'!test03SeLanzaUnaExcepcionCuandoSeAgregaUnaLlamadaHabilConPrecioNegativoSinDescuento	| llamada descuento |		"Arrange"	llamada := RegistroLlamadaNacional conDuracion: 39 yConHorario: 15.	descuento := DescuentoNulo new.		"Act and Assert"	self should: [ 		descuento calcularDescuentoFinal: 0.	] raise: CostoNegativoError.		! !!DescuentoPorDuracionTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 08:11'!test07SeAgreganDosLlamadasInterNacionalesYElPrecioFinalTieneElDescuentoDeAmbaLlamadas	| registro1 registro2 descuento precioTotalConDescuento |		"arrange"		registro1 := RegistroLlamadaInternacional conDuracion: 30 conHorario: 20 HaciaUnPais: 'Peru' 	            yConTarifaInternacional: 10.		registro2 := RegistroLlamadaInternacional conDuracion: 41 conHorario: 20 HaciaUnPais: 'Panama' 	            yConTarifaInternacional: 5.		descuento := DescuentoPorDuracion new.	precioTotalConDescuento := descuento calcularDescuentoFinal: 205.	precioTotalConDescuento := precioTotalConDescuento + ( descuento calcularDescuentoFinal: 300 ).	"Act and Assert"	self assert: ( precioTotalConDescuento ) equals: ( registro1 costoLlamada + registro2 costoLlamada ).! !!DescuentoPorDuracionTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 07:43'!test01SeAgregaUnaLlamadaNacionalEnHorarioHabilConDuracionDe30MinYsuDescuentoEsElEsperado	| llamada descuento |		"Arrange"	llamada := RegistroLlamadaNacional conDuracion: 30 yConHorario: 15.	descuento := DescuentoPorDuracion new.		"Act and Assert"	self assert: ( descuento calcularDescuentoFinal: 6  ) equals: llamada costoLlamada.		! !TestCase subclass: #PrecioPorMinutoHabilTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PrecioPorMinutoHabilTest methodsFor: 'tests' stamp: 'Braya 4/23/2022 19:53'!test02SeRegistraUnaLlamadaNacionalEnHorarioHabilConDescuentoDel10PorcientoYSuPrecioPorMinFinalEsElEsperado	| llamada precioEsperado precioPorMinHabil descuento |		"Arrange"	llamada := RegistroLlamadaNacional conDuracion: 25 yConHorario: 15.	descuento := 0.5.	precioEsperado := ( 25 * 0.2 ) - descuento.	precioPorMinHabil := PrecioPorMinutoHabil new.		"Act and Assert"	self assert: ( ( precioPorMinHabil precioFinal: 25 ) - descuento ) equals: precioEsperado.! !!PrecioPorMinutoHabilTest methodsFor: 'tests' stamp: 'Braya 4/23/2022 19:40'!test01SeRegistraUnaLlamadaNacionalEnHorarioHabilConDescuentoNuloYSuPrecioPorMinFinalEsElEsperado	| llamada precioEsperado precioPorMinHabil descuento |		"Arrange"	llamada := RegistroLlamadaNacional conDuracion: 21 yConHorario: 15.	descuento := 0.	precioEsperado := 21 * 0.2.	precioPorMinHabil := PrecioPorMinutoHabil new.		"Act and Assert"	self assert: ( precioPorMinHabil precioFinal: 21 ) equals: precioEsperado.! !!PrecioPorMinutoHabilTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 08:34'!test03SeLanzaUnaExcepcionCuandoLaDuracionDeLaLlamadaEsNegativaYSeIntentaCalcularElDescuento	| precio |		"arrange"		precio := PrecioPorMinutoHabil new.	"Act and Assert"	self should: [ 		precio precioFinal: -20.	] raise: LaDuracionDeLaLlamadaEsNegativaError.! !TestCase subclass: #PrecioPorMinutoNoHabilTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PrecioPorMinutoNoHabilTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 08:35'!test03SeLanzaUnaExcepcionCuandoLaDuracionDeLaLlamadaEsNegativaYSeIntentaCalcularElDescuento	| precio |		"arrange"		precio := PrecioPorMinutoNoHabil new.	"Act and Assert"	self should: [ 		precio precioFinal: -30.	] raise: LaDuracionDeLaLlamadaEsNegativaError.! !!PrecioPorMinutoNoHabilTest methodsFor: 'tests' stamp: 'Braya 4/23/2022 20:05'!test01SeRegistraUnaLlamadaNacionalEnHorarioNoHabilConDescuentoPorDuracionYSuPrecioPorMinFinalEsElEsperado	| llamada precioEsperado precioPorMinNoHabil descuento |		"Arrange"	llamada := RegistroLlamadaNacional conDuracion: 30 yConHorario: 5.	descuento := 0.3.	precioEsperado := 2.7.	precioPorMinNoHabil := PrecioPorMinutoNoHabil new.		"Act and Assert"	self assert: ( ( precioPorMinNoHabil precioFinal: 30 ) - descuento ) equals: precioEsperado.! !!PrecioPorMinutoNoHabilTest methodsFor: 'tests' stamp: 'Braya 4/23/2022 20:07'!test02SeRegistraUnaLlamadaNacionalEnHorarioNoHabilConDescuentoNuloYSuPrecioPorMinFinalEsElEsperado	| llamada precioEsperado precioPorMinNoHabil descuento |		"Arrange"	llamada := RegistroLlamadaNacional conDuracion: 28 yConHorario: 5.	descuento := 0.28.	precioEsperado := 2.52.	precioPorMinNoHabil := PrecioPorMinutoNoHabil new.		"Act and Assert"	self assert: ( ( precioPorMinNoHabil precioFinal: 28 ) - descuento ) closeTo: precioEsperado.! !TestCase subclass: #RegistroLlamadasTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:42'!test11SaltaUnaExcepcionCuandoSeRegistraUnaLlamadaInternacionalConDuracionNegativa		"arrange act y assert"	self should: [ 		RegistroLlamadaInternacional conDuracion: -10 conHorario: 20 HaciaUnPais: 'Portugal' 	             yConTarifaInternacional: 10.	] raise: LaDuracionDeLaLlamadaEsNegativaError.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:41'!test07SeRegistraUnaLlamadaNacionalEnHorarioHabilYOtraEnHorarioNoHabilYSuCostoEsElEsperadoSinIncluirElAbono	| registro1 registro2 montoEsperado |		"arrange"	montoEsperado := (10 * 0.2) + (5 * 0.1).		registro1 := RegistroLlamadaNacional conDuracion: 10 yConHorario: 20.		registro2 := RegistroLlamadaNacional conDuracion: 5 yConHorario: 5.		"act y assert"	self assert: ( registro1 costoLlamada + registro2 costoLlamada ) equals: montoEsperado.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:42'!test14SaltaUnaExcepcionCuandoSeRegistraUnaLlamadaInternacionalConUnPaisVacio 		"arrange act y assert"	self should: [ 		RegistroLlamadaInternacional conDuracion: 5 conHorario: 23 HaciaUnPais: '' 	             yConTarifaInternacional: 10.	] raise: ElPaisEsVacioError.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:40'!test05SeRegistraUnaLlamadaNacionalYSuDescripcionEsLaEsperada	| registro |		"arrange"	registro := RegistroLlamadaNacional conDuracion: 21 yConHorario: 15.		"act y assert"	self		assert: ( registro mostrar )		equals:		'La llamada mas costosa: La llamada se hizo a Argentina a las 15 hs durando 21 minutos'! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:42'!test10SaltaUnaExcepcionCuandoSeRegistraUnaLlamadaNacionalConHorarioFueraDelRangoDe1Y24	"arrange act y assert"	self should: [ 		RegistroLlamadaNacional conDuracion: 3 yConHorario: 35.	] raise: ElHorarioNoEstaEntre1Y24Error.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:41'!test09SaltaUnaExcepcionCuandoSeRegistraUnaLlamadaNacionalConDuracionNegativa		"arrange act y assert"	self should: [ 		RegistroLlamadaNacional conDuracion: -10 yConHorario: 20.	] raise: LaDuracionDeLaLlamadaEsNegativaError.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:40'!test04SeRegistraUnaLlamadaInternacionalConDescuentoYSuCostoSeguroQueNoEsIgualAlCostoSinDescuento	| registro montoNoEsperado |		"arrange"	montoNoEsperado := (30 * 10).		registro := RegistroLlamadaInternacional conDuracion: 30 conHorario: 20 HaciaUnPais: 'Colombia' 	            yConTarifaInternacional: 10.		"act y assert"	self deny: ( registro costoLlamada ) equals: montoNoEsperado.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:42'!test12SaltaUnaExcepcionCuandoSeRegistraUnaLlamadaInternacionalConHorarioFueraDelRangoDe1Y24		"arrange act y assert"	self should: [ 		RegistroLlamadaInternacional conDuracion: 40 conHorario: -20 HaciaUnPais: 'Chile' 	             yConTarifaInternacional: 10.	] raise: ElHorarioNoEstaEntre1Y24Error.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:39'!test02SeRegistraUnaLlamadaNacionalYOtraInternacionalYElCostoEsElEsperadoSinIncluirElAbonoMensual	| registroNacional registroInternacional montoEsperado descuentoInternacional |		"arrange"	descuentoInternacional := ( 672 * 0.10 ).	montoEsperado := 1  +  ( 672  - descuentoInternacional ).		registroNacional := RegistroLlamadaNacional conDuracion: 10 yConHorario: 21.		registroInternacional := RegistroLlamadaInternacional conDuracion: 32 conHorario: 19	                         HaciaUnPais: 'Islandia' yConTarifaInternacional: 21.		"act y assert"	self assert: ( registroNacional costoLlamada + registroInternacional costoLlamada ) 	     equals: montoEsperado.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:39'!test03SeRegistranDosLlamadasInternacionalesUnaConDescuentoYOtraSinDescuentoYSuCostoEsElEsperado	| registro1 registro2 montoEsperado descuento |		"arrange"	descuento :=  ( 672 * 0.10 ).	montoEsperado := ( ( 10 * 21 ) + ( 32 * 21 ) ) - descuento.		registro1 := RegistroLlamadaInternacional conDuracion: 10 conHorario: 7 HaciaUnPais: 'China' 	             yConTarifaInternacional: 21.		registro2 := RegistroLlamadaInternacional conDuracion: 32 conHorario: 11 HaciaUnPais: 'Islandia' 	             yConTarifaInternacional: 21.		"act y assert"	self assert: ( registro1 costoLlamada + registro2 costoLlamada ) equals: montoEsperado.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:39'!test01SeRegistraUnaLlamadaInternacionalSinDescuentoYSuCostoEsElEsperadoSinIncluirElAbonoMensual	| registro montoEsperado |		"arrange" 	montoEsperado := 10 * 10.		registro := RegistroLlamadaInternacional conDuracion: 10 conHorario: 20 HaciaUnPais: 'Portugal' 	            yConTarifaInternacional: 10.		"act y assert"	self assert: ( registro costoLlamada ) equals: montoEsperado.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:41'!test08SeRegistraUnaLlamadaInternacionalYSuDescripcionEsLaEsperada	| registro |		"arrange"	registro := RegistroLlamadaInternacional conDuracion: 10 conHorario: 20 HaciaUnPais: 'Portugal' 	             yConTarifaInternacional: 10.		"act y assert"	self		assert: ( registro mostrar )		equals:		'La llamada mas costosa: La llamada se hizo a Portugal a las 20 hs durando 10 minutos'! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:42'!test13SaltaUnaExcepcionCuandoSeRegistraUnaLlamadaInternacionalConTarifaNegativa	"arrange act y assert"	self should: [ 		RegistroLlamadaInternacional conDuracion: 5 conHorario: 23 HaciaUnPais: 'Bolivia' 	             yConTarifaInternacional: -45.	] raise: LaTarifaInternacionalEsNegativaError.! !!RegistroLlamadasTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:41'!test06SeRegistraUnaLlamadaNacionalConHorarioHabilYSuCostoEsElEsperadoSinIncluirElAbonoMensual	| registro montoEsperado |		"arrange"	montoEsperado := 10 * 0.2.		registro := RegistroLlamadaNacional conDuracion: 10 yConHorario: 20.		"act y assert"	self assert: ( registro costoLlamada ) equals: montoEsperado.! !TestCase subclass: #TeleAlgoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:28'!test01SeFacturanLasLlamadasDeUnUsuarioQueNoRealizoLlamadasDuranteElMesYPagaSoloElAbonoMensualFijo	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 100.	abonoMensual := 100.		teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.		"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 07:28'!test09SeLanzaUnaExcepcionCuandoSeIntentaRegistrarUnaLlamadaNacionalConUnHorarioQueNoEstaEntre1Y24		| teleAlgo |		"Arrange"	teleAlgo := TeleAlgo new.		"Act and Assert"	self should: [ 		teleAlgo registrarLlamadaNacionalConDuracion: 100 HechaEnElHorario: 25.	] raise: ElHorarioNoEstaEntre1Y24Error.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:28'!test03SeRegistraUnaLlamadaNacionallYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 101.	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:31'!test11SeLanzaUnaExcepcionCuandoSeIntentaRegistrarUnaLlamadaInternacionalConUnHorarioQueNoEstaEntre1Y24	| teleAlgo |		"Arrange"	teleAlgo := TeleAlgo new.		"Act and Assert"	self should: [ 		teleAlgo registrarLlamadaInternacionalCon: 6 HechaEnElHorario: -2 Hacia: 'Chile'.	] raise: ElHorarioNoEstaEntre1Y24Error.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:34'!test15SeLanzaUnaExcepcionCuandoSeIntentaAplicarUnAbonoMensualNegativo	| teleAlgo abonoMensual |		"Arrange"	abonoMensual := -50.		"Act and Assert"	self should: [ 		teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	] raise: ElAbonoMensualEsNegativoError.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:29'!test06SeRegistranAlgunasLlamadasYSeBuscaLaLlamadaMasCostosaRealizadaYDevuelveUnaDescripcionDeLaMisma	| teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 22.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	teleAlgo registrarLlamadaInternacionalCon: 20 HechaEnElHorario: 24 Hacia: 'Paraguay'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Paraguay a las 24 hs durando 20 minutos'! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:30'!test08SeLanzaUnaExcepcionCuandoSeIntentaRegistrarUnaLlamadaNacionalConDuracionNegativa		| teleAlgo |		"Arrange"	teleAlgo := TeleAlgo new.		"Act y Assert"	self should: [ 		teleAlgo registrarLlamadaNacionalConDuracion: -20 HechaEnElHorario: 24.	] raise: LaDuracionDeLaLlamadaEsNegativaError.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:29'!test05SeRegistraUnaLlamadaInternacionalYOtraNacionalEnHorarioHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 20 + 2.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Paraguay'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/25/2022 02:50'!test17SeLanzaUnaExcepcionCuandoSeRegistraUnaLlamadaInternacionalConUnPaisVacio	| teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.		"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.		self should: [ 		teleAlgo registrarLlamadaInternacionalCon: 31 HechaEnElHorario: 20 Hacia: ''.   ] raise: ElPaisEsVacioError.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 12:58'!test19SeRegistraUnaLlamadaInternacionalConDescuentoYOtraNacionalEnHorarioNoHabiConDescuentolYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 72 + 2.79.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 40 HechaEnElHorario: 5 Hacia: 'Nigeria'.	teleAlgo registrarLlamadaNacionalConDuracion: 31 HechaEnElHorario: 1.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 05:30'!test21SeRegistraUnaLlamadaInternacionalConDescuentoYOtraNacionalEnHorarioHabilConDescuentolYSeFactura	| montoNoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	montoNoEsperadoAPagar := abonoMensual + 145 + 8.8.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 5.	teleAlgo registrarLlamadaInternacionalCon: 29 HechaEnElHorario: 21 Hacia: 'Brasil'.	teleAlgo registrarLlamadaNacionalConDuracion: 29 HechaEnElHorario: 8.	self deny: ( teleAlgo calcularGastoFinal ) equals: montoNoEsperadoAPagar.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Braya 4/23/2022 17:58'!test12SeLanzaUnaExcepcionCuandoSeIntentaBuscarLaLlamadaEfectuadaMasCostosaYElRegistroDeLasLlamadasEstaVacio	| teleAlgo |		"Arrange"	teleAlgo := TeleAlgo new.		"Act and Assert"	self should: [ 		teleAlgo consultarPorLlamadaEfectuadaMasCostosa.	] raise: NoHayLlamadasRegistradasError. ! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:28'!test04SeRegistraUnaLlamadaInternacionalYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 110.	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 22 Hacia: 'Uruguay'.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Braya 4/24/2022 07:30'!test14SeRegistraUnaLlamadaInternacionalQueAlDurarMasDe30MinutosSeLeAplicaUnDescuentoDel10PorCiento	| teleAlgo abonoMensual montoEsperadoAPagar |		"Arrange"	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	montoEsperadoAPagar := 155.8.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 31 HechaEnElHorario: 20 Hacia: 'Alemania'.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 13:14'!test13SeRegistraUnaLlamadaNacionalEnHorarioHabilYOtraInternacionalYLaLlamadaMasCostosaEsLaNacional	| teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 1.	teleAlgo registrarLlamadaNacionalConDuracion: 9 HechaEnElHorario: 12.	teleAlgo registrarLlamadaInternacionalCon: 1 HechaEnElHorario: 12 Hacia: 'Chile'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Argentina a las 12 hs durando 9 minutos'! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 13:07'!test20SeRegistraUnaLlamadaInternacionalConDescuentoYOtraNacionalEnHorarioHabiConDescuentolYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 57.6 + 5.58.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 32 HechaEnElHorario: 21 Hacia: 'Brasil'.	teleAlgo registrarLlamadaNacionalConDuracion: 31 HechaEnElHorario: 20.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 13:14'!test22SeRegistraUnaLlamadaInternacionalSinDescuentoYOtraNacionalEnHorarioNoHabiConDescuentolYSeFactura	| teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaNacionalConDuracion: 40 HechaEnElHorario: 5.	teleAlgo registrarLlamadaInternacionalCon: 1 HechaEnElHorario: 3 Hacia: 'Venezuela'.	self		assert: ( teleAlgo consultarPorLlamadaEfectuadaMasCostosa )		equals:		'La llamada mas costosa: La llamada se hizo a Argentina a las 5 hs durando 40 minutos'! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:31'!test10SeLanzaUnaExcepcionCuandoSeIntentaRegistrarUnaLlamadaInternacionalConDuracionNegativa		| teleAlgo |		"Arrange"	teleAlgo := TeleAlgo new.		"Act and Assert"	self should: [ 		teleAlgo registrarLlamadaInternacionalCon: -60 HechaEnElHorario: 20 Hacia: 'Chile'.	] raise: LaDuracionDeLaLlamadaEsNegativaError.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 12:52'!test18SeRegistraUnaLlamadaInternacionalSinDescuentoYOtraNacionalEnHorarioNoHabiSinDescuentolYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	abonoMensual := 100.	montoEsperadoAPagar := abonoMensual + 20 + 1.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	"Act and Assert"	teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: 2.	teleAlgo registrarLlamadaInternacionalCon: 10 HechaEnElHorario: 5 Hacia: 'Japon'.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 1.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:28'!test02SeRegistraUnaLlamadaNacionalEnHoraHabilYSeFactura	| montoEsperadoAPagar teleAlgo abonoMensual |		"Arrange"	montoEsperadoAPagar := 102.	abonoMensual := 100.	teleAlgo := TeleAlgo conAbonoMensual: abonoMensual.	teleAlgo registrarLlamadaNacionalConDuracion: 10 HechaEnElHorario: 17.	"Act and Assert"	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:34'!test16SeLanzaUnaExcepcionCuandoSeRegistraUnaLlamadaInternacionalConTarifaInternacionalNegativa	| teleAlgo abonoMensual tarifaInternacional |		"Arrange"	abonoMensual := 20.	tarifaInternacional := -3.		teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.		"Act and Assert"	self should: [ 		teleAlgo aplicarTarifaPorMinutoALlamadaInternacional: tarifaInternacional.   ] raise: LaTarifaInternacionalEsNegativaError.! !!TeleAlgoTest methodsFor: 'tests' stamp: 'Brayan 4/23/2022 09:29'!test07SeRegistraUnaLlamadaQueAlDurarMasDe30MinutosSeLeAplicaUnDescuentoDel10PorCiento	| teleAlgo abonoMensual montoEsperadoAPagar |		"Arrange"	abonoMensual := 100.	teleAlgo :=  TeleAlgo conAbonoMensual: abonoMensual.	montoEsperadoAPagar := 103.6.	"Act and Assert"	teleAlgo registrarLlamadaNacionalConDuracion: 40 HechaEnElHorario: 24.	self assert: ( teleAlgo calcularGastoFinal ) equals: montoEsperadoAPagar! !